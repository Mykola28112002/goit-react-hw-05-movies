{"version":3,"file":"static/js/186.80cce3f1.chunk.js","mappings":"4TAGAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAO,mCAEAC,EAAc,mCAAG,6GAEDF,IAAAA,IAAA,uCAA0CC,IAFzC,cAElBE,EAFkB,yBAGjBA,EAASC,MAHQ,gCAMxBC,QAAQC,IAAR,MANwB,yDAAH,qDAWdC,EAAiB,mCAAG,WAAMC,GAAN,gGAEJR,IAAAA,IAAA,gCAAmCC,EAAnC,iCAAgEO,EAAhE,yBAFI,cAErBL,EAFqB,yBAGpBA,EAASC,MAHW,gCAM3BC,QAAQC,IAAR,MAN2B,yDAAH,sDAUjBG,EAAe,mCAAG,WAAMC,GAAN,gGAEFV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,EAAvC,oBAFE,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,sDAUfK,EAAY,mCAAE,WAAMD,GAAN,gGAEEV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,oBAFF,cAEfE,EAFe,yBAGdA,EAASC,MAHK,gCAMrBC,QAAQC,IAAR,MANqB,yDAAF,sDAUZM,EAAe,mCAAG,WAAMF,GAAN,gGAEFV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA+CT,EAA/C,oBAFE,cAEnBE,EAFmB,yBAGlBA,EAASC,MAHS,gCAMzBC,QAAQC,IAAR,MANyB,yDAAH,qD,mJCvCfO,EAAU,WAErB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAEuBP,EAAAA,EAAAA,IAAgBE,GAFvC,cAEUM,EAFV,OAIUC,EAASD,EAAKE,QAEpBJ,EAAYG,GANhB,mDASIhB,QAAQC,IAAR,MATJ,0DADc,uBAAC,WAAD,wBAadiB,EACD,GAAE,CAACT,SACmBU,IAAnBP,EAAQQ,QAGR,yBACIR,EAAQS,KAAI,gBAAEC,EAAF,EAAEA,OAAOC,EAAT,EAASA,QAAT,OAAsB,4BAChC,wBAAKD,KACL,uBAAIC,MAFsCD,EAAhC,WASlB,CAGH,EAED,W","sources":["apiFilm.js","components/Reviews/Reviews.jsx"],"sourcesContent":["\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst _KEY = '7b3113adaaaddb4bcf92789694ac9d41';\n\nexport const getTrendMovies = async() => {\n  try {\n      const response = await axios.get(`/trending/movie/week?api_key=${_KEY}`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\n\nexport const getSearchedMovies = async(query) => {\n  try {\n      const response = await axios.get(`/search/movie?api_key=${_KEY}&language=en-US&query=${query}&include_adult=false`);       \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieDetails = async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieCast= async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}/credits?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};\n\nexport const getMovieRewiews = async(movieId) => {\n  try {\n      const response = await axios.get(`/movie/${movieId}/reviews?api_key=${_KEY}&language=en-US`); \n      return response.data;\n  }\n  catch (error) {\n      console.log(error);\n  }\n};","// /movies/get-movie-reviews \n// import { } from \"./Reviews.styled\";\nimport { useParams } from 'react-router-dom';\nimport { getMovieRewiews } from '../../apiFilm';\nimport { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\n\n\nexport const Reviews = () => {\n  \n  const { id } = useParams();\n  const [rewiews, setRewiews] = useState({});\n\n  useEffect(() => {\n    async function getFilm() {\n      try {\n        const film = await getMovieRewiews(id);\n        \n        const acting = film.results;\n        \n        setRewiews({acting}.acting);\n        return;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getFilm();\n  }, [id]);\n  if (rewiews.length !== undefined) {\n    \n    return (\n      <div>\n        { rewiews.map(({author,content}) => <div key={author}>\n            <h3>{author}</h3>\n            <p>{content }</p>\n          </div>) \n          }\n      </div>\n    \n  );\n  } else {\n    return \n  }\n  \n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string\n};"],"names":["axios","_KEY","getTrendMovies","response","data","console","log","getSearchedMovies","query","getMovieDetails","movieId","getMovieCast","getMovieRewiews","Reviews","id","useParams","useState","rewiews","setRewiews","useEffect","film","acting","results","getFilm","undefined","length","map","author","content"],"sourceRoot":""}